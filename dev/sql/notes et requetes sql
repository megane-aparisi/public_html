CREATE DATABASE todolist CHARACTER SET utf8 COLLATE utf8_general_ci;



CREATE TABLE tasks (id INT(11) PRIMARY KEY AUTO_INCREMENT) : 

Id INT() : défini que l'id sera un chiffre et 11 me fait enormement d'id possible
PRIMARY KEY (dit a SQL que ce sera l'identifiant unique de la tache)
auto increment (a chaque tache sauvegardé ce champs id ce mettra à jour pour la suivante)

deadline DATE NULL : NULL veut dire que le champs n'est pas obligatoire l'inverse est NOT NULL

 titre CHAR(50) : char() sert à déclarer une string et dans les parenthèses on met le nb de caractère maximum.

descriptionT TEXT NOT NULL : par rapport à char, TEXT n'est pas limité en nombre de caractères. 

CREATE TABLE tasks (id INT(11) PRIMARY KEY AUTO_INCREMENT, 
                    deadline DATE NOT NULL,
                     titre CHAR(50) NOT NULL,
                       description TEXT(1000) NOT NULL,
                        priorite CHAR(7) NOT NULL,
			 users_id int(11)
                          )ENGINE=INNODB CHARACTER SET=utf8;

DROP TABLE tasks : J'ai jeté ma table;



CREATE TABLE users(id INT(11) PRIMARY KEY AUTO_INCREMENT, 
                     name CHAR(150) NOT NULL,
                      email CHAR(150) NOT NULL UNIQUE (UNIQUE signifie qu'on le met en cache, qu'on l'index pour l'utiliser plus tard de manière unique - si l'utilisateur met deux fois lemail ca ne marche pas)
                  );

La commande ALTER TABLE en SQL permet de modifier une table existante.

FOREIGN KEY permet d'ajouter une clé etrangère "tel champs reference tel champs" 

ALTER TABLE tasks
ADD users_id int(11);

ALTER TABLE tasks
ADD CONSTRAINT fk_user_id  (fk pour foreign key et c'est un nom que l'on choisi, toto , tata etc)
FOREIGN KEY (users_id) REFERENCES users(id);

Créer une données et l'envoyer dans une table : 
INSERT INTO users (name, email) VALUES ('Ursule', 't.urusule@gmail.com');

INSERT INTO tasks (deadline, titre, description, priorite, users_id ) VALUES ('2020-02-20', 'faire les courses', 'ma liste de courses', 'normal', 1);

Afficher mes données : SELECT * FROM tasks;

SELECT * FROM `tasks` WHERE users_id = 1;
SELECT titre, description, users_id as identifiant FROM `tasks` WHERE users_id = 1 (me renomme users_id par identifiant)

depuis le terminal : mysql -uroot -p
Enter password: 

SELECT titre, deadline FROM `tasks` WHERE users_id = 1 ORDER BY deadline (me tri mes champs par la deadline)

SELECT titre, deadline FROM `tasks` WHERE users_id = 1 ORDER BY deadline DESC (inverse le sens de tri dans deadline)

SELECT name, titre from users as u JOIN tasks as t ON u.id = t.users_id WHERE u.id = 1 (j'ai mixé mes deux tables)

SELECT MAX(price) FROM products (permet de trouver le produit le plus cher) (MIN pour miniumum AVG pour average donc la moyenne)

SELECT price FROM products WHERE price BETWEEN 50 and 100

select price from products having price > 50

select name from products where name like 'pro%' (si ce que je cherche commence par ca (ce qui est avant le %) alors tu me sors ça)

SELECT NOW() --> Permet d'afficher le jour et la date à l'heure précise

Exercice BDD : 
Le total du stock et le total de la valeur du stock à la vente de chaque ligne de produit pour les produits vendus plus de 100$ trié par total de la valeur du stock à la vente

1. SELECT addressLine1, addressLine2, city, state, country FROM `offices` ORDER BY country, state DESC
2. SELECT productName, productCode FROM products WHERE productLine = 'planes' ORDER BY productVendor, quantityInStock DESC
3. SELECT productName, productVendor, MSRP FROM `products` WHERE MSRP >= 132 ORDER BY productName
4. SELECT productCode, productName, productScale, quantityInStock FROM `products` WHERE productScale = '1:10' OR productScale = '1:18' ORDER BY quantityInStock DESC
5. SELECT productCode, productName, buyPrice FROM `products` WHERE buyPrice BETWEEN 60 AND 90 ORDER BY buyPrice
6. SELECT productName, productVendor, quantityInStock, MSRP-buyPrice AS marge FROM products WHERE productLine = 'motorcycles' ORDER BY marge DESC
7. SELECT orderNumber, orderDate, shippedDate, status, DATEDIFF(shippedDate, orderDate) AS ecart_dc_dl FROM orders WHERE (status = 'In Process') OR (status = 'Shipped' AND DATEDIFF(shippedDate, orderDate) >= 10)
8. SELECT productName, MSRP*quantityInStock AS stock_value FROM `products` WHERE productName like '196%'
9. SELECT productVendor, ROUND(AVG(MSRP)) FROM products GROUP BY productVendor ORDER BY AVG(MSRP)
10. SELECT productLine, COUNT(productName) FROM products GROUP BY productLine
11.
12. SELECT productVendor, MAX(quantityInStock) FROM products GROUP BY productVendor ORDER BY productVendor
13. SELECT MIN(buyPrice) FROM products WHERE `productLine` = 'planes'
14.SELECT customerNumber, SUM(amount) FROM payments GROUP BY  customerNumber HAVING SUM(amount)>20000
15. SELECT lastName, firstName, jobTitle, employees.officeCode, offices.city, offices.addressLine1 FROM employees JOIN offices ON employees.officeCode = offices.officeCode

16. SELECT customerName, contactLastName, contactFirstName, country, customers.salesRepEmployeeNumber, employees.lastName, employees.firstName 
FROM customers 
JOIN employees 
ON customers.salesRepEmployeeNumber = employees.employeeNumber
WHERE (country = 'France') OR (country ='USA') 
ORDER BY employees.lastName, employees.firstName

17.SELECT orderNumber, orderdetails.productCode, products.productName, products.productLine, (products.MSRP-orderdetails.priceEach) AS discount
FROM orderdetails 
JOIN products 
ON orderdetails.productCode = products.productCode
ORDER BY orderdetails.orderNumber, discount


